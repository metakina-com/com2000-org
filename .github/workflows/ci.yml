name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: dist/
        
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run database migrations
      run: |
        echo "Running database migrations for staging..."
        npx wrangler d1 migrations apply com2000-db-staging --env staging
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      
    - name: Deploy to Cloudflare Workers
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        command: deploy --env staging
        
    - name: Health Check
      run: |
        echo "Waiting for deployment to propagate..."
        sleep 10
        
        echo "Running health check..."
        for i in {1..5}; do
          if curl -f -s "https://api-staging.com2000.org/api/health" > /dev/null; then
            echo "✅ Health check passed!"
            exit 0
          else
            echo "❌ Health check failed, attempt $i/5"
            sleep 5
          fi
        done
        echo "❌ Health check failed after 5 attempts"
        exit 1
        
    - name: Notify Deployment
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🚀 Staging deployment successful!"
          echo "📍 URL: https://api-staging.com2000.org"
        else
          echo "❌ Staging deployment failed!"
        fi
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create deployment backup
      run: |
        echo "Creating database backup before deployment..."
        npx wrangler d1 export com2000-db-production --output=backup-$(date +%Y%m%d-%H%M%S).sql
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      
    - name: Run database migrations
      run: |
        echo "Running database migrations for production..."
        npx wrangler d1 migrations apply com2000-db-production --env production
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      
    - name: Deploy to Cloudflare Workers
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        command: deploy --env production
        
    - name: Health Check
      run: |
        echo "Waiting for deployment to propagate..."
        sleep 15
        
        echo "Running health check..."
        for i in {1..10}; do
          if curl -f -s "https://api.com2000.org/api/health" > /dev/null; then
            echo "✅ Health check passed!"
            exit 0
          else
            echo "❌ Health check failed, attempt $i/10"
            sleep 10
          fi
        done
        echo "❌ Health check failed after 10 attempts"
        exit 1
        
    - name: Notify Deployment
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🚀 Production deployment successful!"
          echo "📍 URL: https://api.com2000.org"
          echo "📊 Monitor: https://dash.cloudflare.com"
        else
          echo "❌ Production deployment failed!"
          echo "🔄 Consider rolling back if necessary"
        fi
        
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'